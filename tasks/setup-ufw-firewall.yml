---

# REFER/2023-04-12: Reset iptables:
#   sudo iptables -F  # BWARE: Will block (though not kill) existing SSH sessions
#                     #        (i.e., you'll need to logon directly to recover).
#   sudo ufw reset    # DUNNO: I haven't investigated to know if this does same
#                     #        as `iptables -F` or something different.
# You can also reset each chain separately: 
#   iptables -F INPUT 
#   iptables -F OUTPUT
#   iptables -F FORWARD
# SAVVY: Use this if you see [UFW BLOCK] in /var/log/syslog, e.g., reset
#        the firewall so Anisble can connect, then run this task again.
#   iptables -P INPUT ACCEPT
#   ip6tables -P INPUT ACCEPT
# You can also allow all on each chain (effectively disabling the firewall):
#   iptables -P INPUT ACCEPT
#   iptables -P OUTPUT ACCEPT
#   iptables -P FORWARD ACCEPT
# For way more information than you really need (but that StackOverflowers
# tend to request), generate a --verbose, --numeric report:
#   iptables/ip6tables -L [INPUT] -v -n

# ***

# Start by accepting all incoming, so that the rules we set don't block
# Ansible while working through this task.
#
# E.g.,
#   sudo iptables -P INPUT ACCEPT
# Or:
#   sudo ufw default accept incoming
- name: Allow all incoming traffic ufw
  become: true
  ansible.builtin.ufw: state=enabled policy=allow direction=incoming

- name: Remove existing UFW rules
  ansible.builtin.shell: >
    ufw status numbered | \
      grep "^\[" | \
      sed -E 's/^\[(.*)\].*/\1/' | \
      sort -r -n | \
      xargs -I '{}' ufw --force delete {}
  become: yes

# E.g., sudo ufw allow 22/tcp  # Substitute 22 with your unconventional SSH port number
- name: Allow ssh traffic
  become: true
  ansible.builtin.ufw: rule=allow port={{ zoidy_troglodyte_ssh_port }} proto=tcp
  when: zoidy_troglodyte_ssh_restrict_macs | length == 0

# NOTED/2023-04-13: I've never enabled Mosh (mobile shell) traffic. (I just use SSH.)
# - I don't know much about Mosh. Sounds similar to `screen` or `tmux`.
# CXREF: https://en.wikipedia.org/wiki/Mosh_(software)
- name: Allow mosh traffic
  become: true
  ansible.builtin.ufw:
    rule: allow
    proto: udp
    port: "{{ zoidy_troglodyte_mosh_port_beg }}:{{ zoidy_troglodyte_mosh_port_end }}"
  # 2019-03-19 00:01: Pretty sure no need to mosh. Not tonight, at least.
  when: False

# ***

# - SAVVY/2023-04-13: We set ACCEPT all previously (until we default deny
#   incoming later), which means first line of `iptables -L INPUT` includes
#   ACCEPT, e.g.,:
#     Chain INPUT (policy ACCEPT)
#   - We ignore this line with an inverted match (grep -v).
- name: Delete existing iptables/ip6tables INPUT rules
  ansible.builtin.shell: >
    /sbin/{{ item }} -L INPUT --line-numbers | \
      grep ACCEPT | \
      grep -v "policy ACCEPT" | \
      awk '{print $1}' | \
      sort -r -n | \
      xargs -I '{}' /sbin/{{ item }} --delete INPUT {}
  become: yes
  loop:
    - iptables
    - ip6tables

# E.g.,
#   sudo iptables  -A INPUT -p tcp --destination-port 22 -m mac --mac-source XX:XX:XX:XX:XX:XX -j ACCEPT
#   sudo ip6tables -A INPUT -p tcp --destination-port 22 -m mac --mac-source XX:XX:XX:XX:XX:XX -j ACCEPT
- name: "Allow ssh traffic from *just my devices* (based on their MACs)"
  ansible.builtin.shell: >
    /sbin/{{ item[0] }} \
      -A INPUT \
      -p tcp \
      --destination-port {{ zoidy_troglodyte_ssh_port }} \
      -m mac \
      --mac-source {{ item[1] }} \
      -j ACCEPT
  become: yes
  notify: Persist iptables
  loop: "{{ ['iptables', 'ip6tables'] | product(zoidy_troglodyte_ssh_restrict_macs) | list }}"
  when: zoidy_troglodyte_ssh_restrict_macs | length > 0

# ***

# CXREF: See `man 8 iptables-extensions` for --dport/--destination-port docs.
- name: Add ip6tables rules for user-specified service ports
  ansible.builtin.shell: >
    /sbin/{{ item[0] }} \
      -A INPUT \
      -p tcp \
      --dport {{ item[1] }} \
      -j ACCEPT
  become: yes
  notify: Persist iptables
  loop: "{{ ['iptables', 'ip6tables'] | product(zoidy_troglodyte_firewall_ports) | list }}"
  when: zoidy_troglodyte_firewall_ports | length > 0

- name: "Add ufw rules for user-specified service ports (if you've defined any)"
  ansible.builtin.ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  become: yes
  notify: Persist iptables
  loop: "{{ zoidy_troglodyte_firewall_ports }}"
  when: zoidy_troglodyte_firewall_ports | length > 0

# ***

# - SAVVY/2023-04-13: Note that conntrack supersedes state, e.g.,
#     iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
#   is an alias to
#     iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
# - SAVVY/2023-04-13: These rules are necessary for -P INPUT DROP to work
#   as intended (otherwise outbound connections can be made, but your app
#   won't see any responses from the remote).
- name: Accept incoming packets for outbound connections (received as part of established connection)
  ansible.builtin.shell: >
    /sbin/{{ item }} -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
  become: yes
  loop:
    - iptables
    - ip6tables

# - SAVVY/2023-04-13: Inbound packets for established connections don't
#   work for me without also accepting all inbound packets from localhost.
- name: Accept incoming packets for outbound connections (received as part of established connection)
  ansible.builtin.shell: >
    /sbin/{{ item }} -A INPUT -i lo -j ACCEPT
  become: yes
  loop:
    - iptables
    - ip6tables

# This completes firewall setup, if you've updated group_vars correctly (in
#   ~/.zoidy/group_vars/zoidy_troglodyte
# ) and if this task is current with the latest iptables version.
# - If not, you might lose access via Ansible, and you'll need to logon the
#   managed node directly, run `sudo iptables -P INPUT ACCEPT`, and then fix
#   the problem(s).
#
# Runs, e.g.,
#   sudo iptables -P INPUT DROP
# Or:
#   sudo ufw default deny incoming
- name: Default ufw deny incoming
  become: true
  ansible.builtin.ufw: state=enabled policy=deny direction=incoming

# ***

- name: Install packages to persist/save iptables/ip6tables firewall settings across boots
  become: true
  ansible.builtin.apt: name={{ item }}
  loop:
    - netfilter-persistent
    - iptables-persistent

- name: Ensure that netfilter-persistent will be enabled at boot
  become: true
  ansible.builtin.systemd:
    name: netfilter-persistent
    state: started
    enabled: yes

# The netfilter-persistent service sometimes fails on boot.
#
# - It needs to wait for UFW to start, it seems.
#
# - (lb): If look in the directory:
#
#     /usr/share/netfilter-persistent/plugins.d/
#
#   and edit
#
#     15-ip4tables (or /25-ip6tables)
#
#   and make the restore task verbose:
#
#     /sbin/iptables-restore --verbose
#
#     (or /sbin/ip6tables-restore --verbose)
#
# you'll see that when netfilter-persistent runs, it deletes a number of
# `ufw-*` (or `ufw6-*`) chains. So I assume the error that occurs on boot
# is that UFW is not always started before netfilter-persistent, and those
# rules are not always present. However, I am not ðŸ’¯, because `*-restore`
# (even with --verbose) does not indicate an error. Rather, you'll see
# the error in /var/log/syslog, e.g.:
#     [578] 9345:22:Mar 25 11:49:59 host netfilter-persistent[850]:
#       Deleting chain `ufw6-track-output'
#     [579] 9348:22:Mar 25 11:49:59 host netfilter-persistent[850]:
#       run-parts: /usr/share/netfilter-persistent/plugins.d/25-ip6tables exited with return code 1
#
# - See also: "netfilter-persistent fails randomly during boot; restarting later works"
#
#   https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=867560
#
#   Wherein the issue was closed because the reported stopped replying,
#   and because the investigator was able to work around the issue if
#   they "preload the modules that iptables needs".
#
- name: "Ensure that netfilter-persistent starts after UFW, via Wants="
  become: true
  # DEFAULT:
  # Wants=systemd-modules-load.service local-fs.target
  ansible.builtin.lineinfile:
    dest: /lib/systemd/system/netfilter-persistent.service
    regexp: "^Wants="
    line: "Wants=systemd-modules-load.service local-fs.target ufw.service"
    state: present

- name: "Ensure that netfilter-persistent starts after UFW, via After="
  become: true
  # DEFAULT:
  # After=systemd-modules-load.service local-fs.target
  ansible.builtin.lineinfile:
    dest: /lib/systemd/system/netfilter-persistent.service
    regexp: "^After="
    line: "After=systemd-modules-load.service local-fs.target ufw.service"
    state: present

