---

- name: Setup ufw
  become: true
  ufw: state=enabled policy=deny direction=incoming

- name: Remove existing UFW rules
  shell: >
    ufw status numbered | \
      grep "^\[" | \
      /bin/sed -r 's/^\[(.*)\].*/\1/' | \
      sort -r -n | \
      xargs -I '{}' ufw --force delete {}
  become: yes

- name: Allow ssh traffic
  become: true
  ufw: rule=allow port={{ zoidy_troglodyte_ssh_port }} proto=tcp
  when: zoidy_troglodyte_ssh_restrict_macs | length == 0

# https://en.wikipedia.org/wiki/Mosh_(software)
- name: Allow mosh traffic
  become: true
  ufw:
    rule: allow
    proto: udp
    port: "{{ zoidy_troglodyte_mosh_port_beg }}:{{ zoidy_troglodyte_mosh_port_end }}"
  # 2019-03-19 00:01: Pretty sure no need to mosh. Not tonight, at least.
  when: False

# ***

- name: Clean existing INPUT rules
  shell: >
    /sbin/iptables -L INPUT --line-numbers | \
      grep ACCEPT | \
      awk '{print $1}' | \
      sort -r -n | \
      xargs -I '{}' /sbin/iptables --delete INPUT {}
  become: yes

# E.g.,
#   /sbin/iptables -A INPUT -p tcp --destination-port 22 -m mac --mac-source XX:XX:XX:XX:XX:XX -j ACCEPT
- name: Allow ssh traffic from *just my devices*
  shell: >
    /sbin/iptables \
      -A INPUT \
      -p tcp \
      --destination-port {{ zoidy_troglodyte_ssh_port }} \
      -m mac \
      --mac-source {{ item }} \
      -j ACCEPT
  become: yes
  notify: Persist iptables
  loop: "{{ zoidy_troglodyte_ssh_restrict_macs }}"
  when: zoidy_troglodyte_ssh_restrict_macs | length > 0

# ***

- name: Add iptables rules for user-specified service ports
  # (lb): I can find neither --destination-port nor --dport documented.
  # Works though.
  shell: >
    /sbin/iptables \
      -A INPUT \
      -p tcp \
      --dport {{ item }} \
      -j ACCEPT
  become: yes
  notify: Persist iptables
  loop: "{{ zoidy_troglodyte_firewall_ports }}"
  when: zoidy_troglodyte_firewall_ports | length > 0

- name: Add ufw rules for user-specified service ports
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  become: yes
  notify: Persist iptables
  loop: "{{ zoidy_troglodyte_firewall_ports }}"
  when: zoidy_troglodyte_firewall_ports | length > 0

# ***

- name: Install packages to persist/save iptables firewall settings across boots
  become: true
  apt: name={{ item }}
  loop:
    - netfilter-persistent
    - iptables-persistent

- name: Ensure that netfilter-persistent will be enabled at boot
  become: true
  systemd:
    name: netfilter-persistent
    state: started
    enabled: yes

# The netfilter-persistent service sometimes fails on boot.
#
# - It needs to wait for UFW to start, it seems.
#
# - (lb): If look in the directory:
#
#     /usr/share/netfilter-persistent/plugins.d/
#
#   and edit
#
#     15-ip4tables (or /25-ip6tables)
#
#   and make the restore task verbose:
#
#     /sbin/iptables-restore --verbose
#
#     (or /sbin/ip6tables-restore --verbose)
#
# you'll see that when netfilter-persistent runs, it deletes a number of
# `ufw-*` (or `ufw6-*`) chains. So I assume the error that occurs on boot
# is that UFW is not always started before netfilter-persistent, and those
# rules are not always present. However, I am not ðŸ’¯, because `*-restore`
# (even with --verbose) does not indicate an error. Rather, you'll see
# the error in /var/log/syslog, e.g.:
#     [578] 9345:22:Mar 25 11:49:59 host netfilter-persistent[850]:
#       Deleting chain `ufw6-track-output'
#     [579] 9348:22:Mar 25 11:49:59 host netfilter-persistent[850]:
#       run-parts: /usr/share/netfilter-persistent/plugins.d/25-ip6tables exited with return code 1
#
# - See also: "netfilter-persistent fails randomly during boot; restarting later works"
#
#   https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=867560
#
#   Wherein the issue was closed because the reported stopped replying,
#   and because the investigator was able to work around the issue if
#   they "preload the modules that iptables needs".
#
- name: "Ensure that netfilter-persistent starts after UFW, via Wants="
  become: true
  # DEFAULT:
  # Wants=systemd-modules-load.service local-fs.target
  lineinfile: dest=/lib/systemd/system/netfilter-persistent.service
              regexp="^Wants="
              line="Wants=systemd-modules-load.service local-fs.target ufw.service"
              state=present

- name: "Ensure that netfilter-persistent starts after UFW, via After="
  become: true
  # DEFAULT:
  # After=systemd-modules-load.service local-fs.target
  lineinfile: dest=/lib/systemd/system/netfilter-persistent.service
              regexp="^After="
              line="After=systemd-modules-load.service local-fs.target ufw.service"
              state=present

