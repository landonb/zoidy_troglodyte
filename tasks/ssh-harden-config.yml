---

- name: Disallow password authentication
  become: true
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^PasswordAuthentication"
    line: "PasswordAuthentication no"
    state: present

- name: Disallow root SSH access
  become: true
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^PermitRootLogin"
    line: "PermitRootLogin no"
    state: present
  notify: Restart sshd

- name: Allow only this user to SSH-connect
  become: true
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^AllowUsers"
    line: "AllowUsers {{ ansible_env.LOGNAME }}"
    state: present
  notify: Restart sshd

- name: "Change control node's SSH remote port number — localhost:~/.ssh/config"
  delegate_to: localhost
  ansible.builtin.lineinfile:
    dest: ~/.ssh/config
    insertafter: "^Host {{ ansible_hostname }}$"
    regexp: "\tPort\\s"
    line: "\tPort {{ zoidy_troglodyte_ssh_port }}"
    state: present
  when: zoidy_troglodyte_ssh_port != 22

# SAVVY: The play will fail after this step runs, and you'll need to
# re-run the play with the new managed node port number.
# - E.g., on the first zoidy_troglodyte run on a fresh machine, you'll
#   run `ansible-playbook ... -e "ansible_port=22"`, then this step runs,
#   Ansible fails, and you'll run `ansible-playbook ...` again, but without
#   the port 22 change (so that Ansible uses the new, non-standard port
#   number).
# - BWARE/2024-02-04: I had issues today setting up a new machine, and
#   had issues re-running the play after this step ran. So I swapped this
#   step and the (now) previous step, and fixed a few other issues, and then
#   the play ran to completion.
#   - Hopefully, the next time this play runs on a new machine, it'll work
#     smoothly — but I did not explicitly verify that'll be the case. So
#     you still might have issues on the second run (if I didn't actually
#     fix the real problem). (Though, it might have been that, when the
#     local ~/.ssh/config change was *after* this step, that I needed to run
#     `ansible-playbook ... -e "ansible_port={{ zoidy_troglodyte_ssh_port }}"`
#     because Ansible was still using port 22.)
- name: "Change managed node's SSH server port number — {{ ansible_hostname }}:/etc/ssh/sshd_config"
  become: true
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^Port\\s"
    line: "Port {{ zoidy_troglodyte_ssh_port }}"
    state: present
  notify: Restart sshd
  when: zoidy_troglodyte_ssh_port != 22

- name: Disallow X11 traffic forwarding
  become: true
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^X11Forwarding"
    line: "X11Forwarding no"
    state: present
  notify: Restart sshd

- name: Enable DNS hostname checking (verify caller IP)
  become: true
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^UseDNS"
    line: "UseDNS yes"
    state: present
  notify: Restart sshd

- name: Halve the number of connection attempts (to 3 from 6)
  become: true
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^MaxAuthTries"
    line: "MaxAuthTries 3"
    state: present
  notify: Restart sshd

# ***

- name: Restrict SSH to specific user(s), perhaps
  become: true
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^AllowUsers"
    line: "AllowUsers {{ zoidy_troglodyte_ssh_restrict_user }}"
    state: present
  notify: Restart sshd
  when: zoidy_troglodyte_ssh_restrict_user != ''

# ***

# # This is purely to limit attack vectors.
# # (lb): But I cannot think how inet6 could be exploited.
# - name: Limit SSH to listening on IPv4
#   become: true
#   ansible.builtin.lineinfile:
#     dest: /etc/ssh/sshd_config
#     regexp: "^AddressFamily"
#     line: "AddressFamily inet"
#     state: present
#   notify: Restart sshd

